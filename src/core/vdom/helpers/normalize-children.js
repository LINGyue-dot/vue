/*
 * @Author: qianlong github:https://github.com/LINGyue-dot
 * @Date: 2021-10-16 15:06:03
 * @LastEditors: qianlong github:https://github.com/LINGyue-dot
 * @LastEditTime: 2021-10-21 19:00:58
 * @Description:
 */
/* @flow */

import VNode, { createTextVNode } from "core/vdom/vnode";
import { isFalse, isTrue, isDef, isUndef, isPrimitive } from "shared/util";

// The template compiler attempts to minimize the need for normalization by
// statically analyzing the template at compile time.
//
// For plain HTML markup, normalization can be completely skipped because the
// generated render function is guaranteed to return Array<VNode>. There are
// two cases where extra normalization is needed:

// 1. When the children contains components - because a functional component
// may return an Array instead of a single root. In this case, just a simple
// normalization is needed - if any child is an Array, we flatten the whole
// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
// because functional components already normalize their own children.
// render 函数是编译生成的即 runtime + complier 模式
// 这时编译生成的 children 已经是 vnode 类型
// 但是唯一例外是函数式组件返回的是一个数组而不是根节点就将该数组返回
// ex [[]] ，需要返回的是深度只有一层的数组
export function simpleNormalizeChildren(children: any) {
  for (let i = 0; i < children.length; i++) {
    if (Array.isArray(children[i])) {
      return Array.prototype.concat.apply([], children);
    }
  }
  return children;
}

// 2. When the children contains constructs that always generated nested Arrays,
// e.g. <template>, <slot>, v-for, or when the children is provided by user
// with hand-written render functions / JSX. In such cases a full normalization
// is needed to cater to all possible types of children values.
// render 函数是用户手写即 runtime only
// 1.当 children 只有一个节点时候，Vue 允许用户将 children 写成基本类型，这时会调用 createTextVNode 创建文本节点 VNode
// 2.当编译 slot 、v-for 时候会产生嵌套数组时候，就调用 normalizeArrayChildren

export function normalizeChildren(children: any): ?Array<VNode> {
  return isPrimitive(children) // 基本类型
    ? [createTextVNode(children)]
    : Array.isArray(children)
    ? normalizeArrayChildren(children)
    : undefined;
}

function isTextNode(node): boolean {
  return isDef(node) && isDef(node.text) && isFalse(node.isComment);
}

function normalizeArrayChildren(
  children: any, // 子节点
  nestedIndex?: string // 嵌套索引
): Array<VNode> {
  const res = [];
  let i, c, lastIndex, last;
  for (i = 0; i < children.length; i++) {
    // 遍历获取单节点
    c = children[i];
    if (isUndef(c) || typeof c === "boolean") continue;
    lastIndex = res.length - 1;
    last = res[lastIndex];
    //  nested
    if (Array.isArray(c)) {
      // 数组
      if (c.length > 0) {
        // 递归调用
        c = normalizeArrayChildren(c, `${nestedIndex || ""}_${i}`);
        // merge adjacent text nodes
        if (isTextNode(c[0]) && isTextNode(last)) {
          res[lastIndex] = createTextVNode(last.text + (c[0]: any).text);
          c.shift();
        }
        res.push.apply(res, c);
      }
    } else if (isPrimitive(c)) {
      // 基础类型
      // 如果已经是 VNode 类型
      if (isTextNode(last)) {
        // merge adjacent text nodes
        // this is necessary for SSR hydration because text nodes are
        // essentially merged when rendered to HTML strings
        res[lastIndex] = createTextVNode(last.text + c);
      } else if (c !== "") {
        // 不是 VNode 类型 转换成 VNode 类型
        // convert primitive to vnode
        res.push(createTextVNode(c));
      }
    } else {
      // !!! NOTICE

      if (isTextNode(c) && isTextNode(last)) {
        // merge adjacent text nodes
        res[lastIndex] = createTextVNode(last.text + c.text);
      } else {
        // default key for nested array children (likely generated by v-for)
        if (
          isTrue(children._isVList) &&
          isDef(c.tag) &&
          isUndef(c.key) &&
          isDef(nestedIndex)
        ) {
          // 如果 children 是一个列表且还存在嵌套，则根据 nextedIndex 去更新他的 key
          c.key = `__vlist${nestedIndex}_${i}__`;
        }
        res.push(c);
      }
    }
  }
  return res;
}
